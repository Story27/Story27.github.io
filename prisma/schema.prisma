datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  problemSets           Problem[]

  Contest Contest[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Contest {
  id        String    @id @default(cuid())
  name      String
  startTime DateTime
  endTime   DateTime
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  problems  Problem[]
}

model Problem {
  id          String     @id @default(cuid())
  title       String
  description String?    @default("")
  difficulty  Difficulty
  topics      String
  testCases   TestCase[]
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  contests    Contest[]
  acceptances String[] @default([])
}

model TestCase {
  id               String  @id @default(cuid())
  input            String
  output           String
  problemId        String
  problem          Problem @relation(fields: [problemId], references: [id])
  isSampleTestCase Boolean @default(false)
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
